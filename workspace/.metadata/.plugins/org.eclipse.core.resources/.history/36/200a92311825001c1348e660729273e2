package it.capgemini.academy.giorno6.esercizioenum;

import it.capgemini.academy.giorno1.EserciziStringheEIf;
import it.capgemini.academy.giorno4.exception.EtaException;
import it.capgemini.academy.giorno6.enumerazioni.StatoCivile;
import it.capgemini.academy.giorno4.EserciziEccezioni;

public class Persona {
	/*
	 * class diagram Persona fields -nome: String -cognome : String -età : int
	 * -genere: char -sposato : boolean
	 * 
	 * methods +stampaIniziali(pubblico) +getIniziali(); String
	 * 
	 * +Persona(nome,cognome,età, genere,sposato)
	 * 
	 * <<constructor>> +allGetters +allSetters +toString
	 */
	private String nome;
	private String cognome;
	private String eta;
	private char genere;
	private StatoCivile stato;
	// private boolean sposato;

//	public class StatoCivile {
//		//classe interna, classe dichiarata nel corpo di un'altra classe
//		// bisognerebbe poi controllare manualmente che i valori inseriti siano tra questi
//		
//		public static final String NUBILE ="nubile" ;
//		public static final String CELIBE = "celibe" ;
//		public static final String SPOSATA = "sposata" ;
//		public static final String SPOSATO = "sposato" ;
//		public static final String VEDOVO = "vedovo" ;
//		public static final String VEDOVA = "vedova" ;
//		
//	}

	public Persona(String nome, String cognome, String eta, char genere, StatoCivile stato) {
		this.nome = nome;
		this.cognome = cognome;
		this.stato = stato;

		try {
			EserciziEccezioni.validaEta(eta);
			this.eta = eta;

		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			this.eta = "Età non valida";
		}
		this.genere = genere;
		// this.sposato=sposato;
	}

	public Persona(String nome, String cognome) {
		this.nome = nome;
		this.cognome = cognome;
	}

	public Persona() {
		super();
	}

//	private void validaEta (String eta) throws EtaException {
//		if (Integer.parseInt(eta) < 0) {
//			throw new EtaException();
//		}
//	}

	public String getInitials() {
		return EserciziStringheEIf.ritornaIniziali(this.nome, this.cognome);
	}

	public void printInitials() {
		System.out.println(EserciziStringheEIf.ritornaIniziali(this.nome, this.cognome));
	}

	public String getNome() {
		return nome;
	}

	public String getCognome() {
		return cognome;
	}

	public String getEta() {
		return eta;
	}

	public char getGenere() {
		return genere;
	}

	public boolean getSposato() {
		return (this.stato.getStato() == StatoCivile.SPOSATA.getStato()
				|| this.stato.getStato() == StatoCivile.SPOSATO.getStato());

	}

	public void setStatoCivile(String stato) {
		this.stato.setStato(stato);
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	public void setCognome(String cognome) {
		this.cognome = cognome;
	}

	public void setEta(String eta) {
		try {
			EserciziEccezioni.validaEta(eta);
			this.eta = eta;

		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}

	}

	public void setGenere(char genere) {
		this.genere = genere;
	}

	public void setSposato(boolean sposato) {

		if (sposato) {
			if (Character.toLowerCase(this.getGenere()) == 'm') {
				this.stato = StatoCivile.SPOSATO;
			} else {
				this.stato = StatoCivile.SPOSATA;
			}
			
		}

		

	}

	@Override
	public String toString() {
		return "Persona [nome=" + nome + ", cognome=" + cognome + ", eta=" + eta + ", genere=" + genere + ", sposato="
				+ stato.SPOSATO.isB() + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((cognome == null) ? 0 : cognome.hashCode());
		result = prime * result + ((eta == null) ? 0 : eta.hashCode());
		result = prime * result + genere;
		result = prime * result + ((nome == null) ? 0 : nome.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Persona other = (Persona) obj;
		if (cognome == null) {
			if (other.cognome != null)
				return false;
		} else if (!cognome.equals(other.cognome))
			return false;
		if (eta == null) {
			if (other.eta != null)
				return false;
		} else if (!eta.equals(other.eta))
			return false;
		if (genere != other.genere)
			return false;
		if (nome == null) {
			if (other.nome != null)
				return false;
		} else if (!nome.equals(other.nome))
			return false;
		return true;
	}

}
